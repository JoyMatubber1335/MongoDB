mongosh: to entry mongo cli
show dbs :show all databse
show collections: show all collection related databse
use user : entry user database
db.dropDatabase(): drop the database
exit: exit the mongosh


/////********************* Create ******************************

             -- single create(Insert) :
 ------------------------------------------------- 
 db.CollectionName.insertOne({key:"value"})
    ex: db.users.insertOne({name:"joy"})
    ex2:db.users.insertOne({name:"rana",age:23, address:{road:2,house:"rnd road"}, hobbise:["cricket","football"]})

              --- multiple create(Insert) : 
---------------------------------------------------
db.CollectionName.insertMany([{},{},{}]);
    ex:db.users.insertMany([{name:"rabbi",age:"23", address:{house:"232"}},{name:"Ayesha" ,age:12, hobbies:["art","watchCurotn"]}])   


////******************* Read *******************

                -- Read all 
--------------------------------------------
db.CollectionName.find()
     ex: db.users.find()

--limit/sort or etc..
-----------
db.users.find().limit(2)

db.users.find().sort({name:1}).limit(2)  // name:1 = ass order name:-1 mean reverse order
// skip method that skip or not count in db without this the database is query
    ex : db.users.find().skip(1).limit(2)


// where method //
 db.users.find({name:"joy"})
 db.users.find({name:"joy"},{name:1})  // name:1 mean show only name filed
 db.users.find({name:"rabbi"},{age:0})  // age:0 mean show all without age

 // complex query

 Equal and not Equal :
   -- appdb>db.users.find({name:{$eq:"rabbi"}})  // Name equal to rabbi
   -- appdb> db.users.find({name:{$ne:"rabbi"}})  // name not equal to rabbi
   --db.users.find({age:{$gt:13}})  //age is gatter then 13 
   -- db.users.find({age:{$lte:23}})  // less then and equal
   -- db.users.find({name:{$in:["rabbi","Ayesha"]}})  // name equal rabbi and Ayesha ," CASE SENSATIVE"
   --db.users.find({name:{$nin:["rabbi","Ayesha"]}}) // name is not equal to those
   -- db.users.find({age:{$exists:true}}) return those filed that have an age

// More complex
    //---------And-----------
   --db.users.find({age:{$gte:23,$lte:30}})  // Using add 
   --db.users.find({age:{$gte:23,$lte:30},name:"rayhan"}) //using add 
   --db.users.find({$and:[{age:30},{name:"rayhan"}]}) // Another add query
     //------------Or-------------
   --db.users.find({$or:[{age:23},{name:"rayhan"}]})
   //----------not------
   db.users.find({age:{$not:{$eq:23}}})  // age is not equal 23


//------------------------Update--------------------------